// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id               Int                 @id @default(autoincrement())
  name             String
  brand            String
  categories       ProductCategory[]
  imageUrl         String[]
  servingSize      Float?
  servingUnit      String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now()) @updatedAt
  nutritionalFacts NutritionalFact?   
  ingredients      ProductIngredient[]
  claims           ProductClaim[]     
  allergens        ProductAllergen[] 
  summary          String

  // Fields for health-based recommendations
  healthScore        Float
  nutritionDensity   Float
  functionalBenefits String[]
  venderName         String
  vendorProductUrl   String
  suitableFor        HealthDetail[] 
  notSuitableFor     HealthDetail[]
  personalOverviews  PersonalizedOverview[] 
  consumptions       Consumption[]      
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  products ProductCategory[]
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([productId, categoryId])
}

model NutritionalFact {
  id                Int     @id @default(autoincrement())
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade) 
  productId         Int     @unique
  calories          Float?
  totalFat          Float?
  saturatedFat      Float?
  transFat          Float?
  cholesterol       Float?
  sodium            Float?
  totalCarbohydrate Float?
  dietaryFiber      Float?
  totalSugars       Float?
  addedSugars       Float?
  protein           Float?
  vitaminA          Float?
  vitaminC          Float?
  calcium           Float?
  iron              Float?
}

model Ingredient {
  id             Int                 @id @default(autoincrement())
  name           String              @unique
  products       ProductIngredient[]
  effects        IngredientEffect[]
  description    String?
  commonUses     String?
  potentialRisks String?
}

model ProductIngredient {
  product      Product    @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId    Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id],onDelete: Cascade)
  ingredientId Int
  orderNumber  Int

  @@id([productId, ingredientId])
}

model IngredientEffect {
  id                 Int        @id @default(autoincrement())
  ingredient         Ingredient @relation(fields: [ingredientId], references: [id],onDelete: Cascade)
  ingredientId       Int
  effectType         String?
  description        String?
  scientificEvidence String?
  severity           String?
  duration           String?
}

model ProductClaim {
  id                 Int     @id @default(autoincrement())
  product            Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId          Int
  claim              String
  verificationStatus String?
  explanation        String?
  source             String?
}

model Allergen {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  products ProductAllergen[]
}

model ProductAllergen {
  product    Product  @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId  Int
  allergen   Allergen @relation(fields: [allergenId], references: [id],onDelete: Cascade)
  allergenId Int

  @@id([productId, allergenId])
}

// User tables

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  isOnboarded        Boolean            @default(false)
  biologicalSex      BiologicalSex?
  age                Int?
  weight             Float?
  height             Float?
  activityLevel      ActivityLevel?
  dietaryPreference  DietaryPreference?
  nutritionKnowledge Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Fields for health based recommendation
  healthGoals       HealthGoal[]
  healthDetails     HealthDetail[]
  dailyCalorieNeeds Float?

  // Can be added later on.
  // macroNutrientRatio MacroNutrientRatio?
  // microNutrientNeeds MicroNutrientNeed[]
  // Ignoring allergies for now.

  personalOverviews         PersonalizedOverview[]
  consumptions              Consumption[]
  weeklyConsumptionAnalysis WeeklyConsumptionAnalysis[]
}

// model MacroNutrientRatio {
//   id      Int    @id @default(autoincrement())
//   userId  String @unique
//   protein Float
//   carbs   Float
//   fats    Float
//   user    User   @relation(fields: [userId], references: [id])
// }

// model MicroNutrientNeed {
//   id       Int    @id @default(autoincrement())
//   userId   String
//   nutrient String
//   amount   Float
//   unit     String
//   user     User   @relation(fields: [userId], references: [id])
// }

model PersonalizedOverview {
  id                       Int     @id @default(autoincrement())
  userId                   String
  productId                Int
  overview                 String?
  matchScore               Int?
  suitabilityReasons       Json[]
  safeConsumptionGuideline Json
  healthGoalImpacts        Json[]
  nutrientHighlights       Json[]

  product Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId, productId])
}

model Consumption {
  id        String @id @default(cuid())
  productId Int
  userId    String
  quantity  Int // In unit of product
  duration  Int // In days

  product Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId ,createdAt])
  @@index([userId, productId ,createdAt])
}

// Change this to daily later on.
model WeeklyConsumptionAnalysis {
  id                    String   @id @default(cuid())
  userId                String
  totalConsumedCalories Float
  totalConsumedProducts Int
  majorCategories       String[]
  totalNutrients        Json
  aiAnalysis            Json
  createdAt             DateTime @default(now())

  user User @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@index([userId,createdAt])
}

enum BiologicalSex {
  MALE
  FEMALE
}

enum HealthDetail {
  NORMAL
  UNDERWEIGHT
  OVERWEIGHT
  OBESE
  DIABETES
  HYPERTENSION
  CARDIOVASCULAR
  RESPIRATORY
  DIGESTIVE
  ALLERGIES
  THYROID
  ARTHRITIS
}

enum ActivityLevel {
  SEDENTARY
  LIGHTLY_ACTIVE
  MODERATELY_ACTIVE
  VERY_ACTIVE
  EXTREMELY_ACTIVE
}

enum DietaryPreference {
  EGGITARIAN
  VEGETARIAN
  VEGAN
  NON_VEGETARIAN
}

enum HealthGoal {
  HEALTH_BOOST
  WEIGHT_LOSS
  WEIGHT_GAIN
  MUSCLE_GAIN
  LESS_SUGAR
  CARDIO_CARE
  BETTER_SLEEP
  STRESS_REDUCTION
  IMPROVED_DIGESTION
  INCREASED_ENERGY
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
