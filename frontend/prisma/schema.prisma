// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id                 Int                  @id @default(autoincrement())
  name               String
  brand              String
  categories         ProductCategory[]
  imageUrl           String[]
  servingSize        Float?
  servingUnit        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  nutritionalFacts   NutritionalFact?
  ingredients        ProductIngredient[]
  claims             ProductClaim[]
  allergens          ProductAllergen[]
  summary            String
}

model Category {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  products ProductCategory[]
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([productId, categoryId])
}

model NutritionalFact {
  id                Int     @id @default(autoincrement())
  product           Product @relation(fields: [productId], references: [id])
  productId         Int     @unique
  calories          Float?
  totalFat          Float?
  saturatedFat      Float?
  transFat          Float?
  cholesterol       Float?
  sodium            Float?
  totalCarbohydrate Float?
  dietaryFiber      Float?
  totalSugars       Float?
  addedSugars       Float?
  protein           Float?
  vitaminA          Float?
  vitaminC          Float?
  calcium           Float?
  iron              Float?
}

model Ingredient {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  products           ProductIngredient[]
  effects            IngredientEffect[]
  description        String?
  commonUses         String?
  potentialRisks     String?
}

model ProductIngredient {
  product           Product    @relation(fields: [productId], references: [id])
  productId         Int
  ingredient        Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId      Int
  orderNumber       Int

  @@id([productId, ingredientId])
}

model IngredientEffect {
  id                 Int        @id @default(autoincrement())
  ingredient         Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId       Int
  effectType         String?
  description        String?
  scientificEvidence String?
  severity           String?
  duration           String?
}

model ProductClaim {
  id                 Int      @id @default(autoincrement())
  product            Product  @relation(fields: [productId], references: [id])
  productId          Int
  claim              String
  verificationStatus String?
  explanation        String?
  source             String?
}


model Allergen {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  products ProductAllergen[]
}

model ProductAllergen {
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  allergen   Allergen @relation(fields: [allergenId], references: [id])
  allergenId Int

  @@id([productId, allergenId])
}



// User tables

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

